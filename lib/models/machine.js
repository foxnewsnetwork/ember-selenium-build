// Generated by CoffeeScript 1.10.0
var Builder, By, Machine, RSVP, Until, Writer, asyncMap, chromedriver, path, ref, wait;

path = require("path");

RSVP = require("rsvp");

asyncMap = require("../utils/async-map");

Writer = require("./writer");

chromedriver = require('chromedriver');

ref = require('selenium-webdriver'), Builder = ref.Builder, By = ref.By, Until = ref.until;

wait = function(time) {
  return new RSVP.Promise(function(r) {
    return setTimeout(r, time);
  });
};

Machine = (function() {
  var instance;

  instance = null;

  Machine.setupBuilder = function(flavor) {
    var Options, chromeOptions;
    switch (flavor) {
      case "chrome":
        Options = require('selenium-webdriver/chrome').Options;
        chromeOptions = new Options();
        chromeOptions.addArguments(['--incognito']);
        return new Builder().forBrowser('chrome').setChromeOptions(chromeOptions);
      default:
        throw new Error("Sorry, currently only 'chrome' is supported");
    }
  };

  Machine.setupDriver = function(flavor) {
    return this.setupBuilder(flavor).buildAsync();
  };

  Machine.instance = function() {
    return instance;
  };

  Machine.initialize = function(arg) {
    var baseURI, flavor, outPath, routes;
    flavor = arg.flavor, baseURI = arg.baseURI, outPath = arg.outPath, routes = arg.routes;
    return this.setupDriver(flavor).then(function(driver) {
      return instance = new Machine(driver, baseURI, routes, outPath);
    });
  };

  function Machine(driver1, baseURI1, routes1, outPath) {
    this.driver = driver1;
    this.baseURI = baseURI1;
    this.routes = routes1;
    this.writer = new Writer(outPath);
  }

  Machine.prototype.write = function(string) {
    return this.writer.write(string);
  };

  Machine.prototype.quit = function() {
    return this.driver.quit();
  };

  Machine.prototype.build = function() {
    return asyncMap(this.routes, this.generatePage.bind(this));
  };

  Machine.prototype.finishBuild = function() {
    return this.build().then(this.quit.bind(this));
  };

  Machine.prototype.generatePage = function(route) {
    return this.driver.get(this.calculateURI(route)).then((function(_this) {
      return function() {
        return _this.driver.wait(_this.until.titleMatches(/~ok$/), 1000);
      };
    })(this)).then((function(_this) {
      return function() {
        return wait(1500);
      };
    })(this)).then((function(_this) {
      return function() {
        return _this.driver.getPageSource();
      };
    })(this)).then((function(_this) {
      return function(source) {
        return _this.write(source).intoFile(_this.calculateFilename(route));
      };
    })(this));
  };

  Machine.prototype.calculateURI = function(route) {
    return path.normalize(path.join(this.baseURI, route));
  };

  Machine.prototype.calculateFilename = function(route) {
    var endsInSlash;
    endsInSlash = /\/$/;
    switch (false) {
      case endsInSlash.exec(route) == null:
        return path.join(route, "index");
      default:
        return route;
    }
  };

  return Machine;

})();

module.exports = Machine;
